## Default values for Redash.
## This is a YAML-formatted file.

image:
  # image.repository -- Redash image name used for server and worker pods
  repository: redash/redash
  # image.tag -- Redash image [tag](https://hub.docker.com/r/redash/redash/tags)
  tag: 8.0.2.b37747
  # image.pullPolicy - Image pull policy
  pullPolicy: IfNotPresent

# imagePullSecrets -- Name(s) of secrets to use if pulling images from a private registry
imagePullSecrets: []
# nameOverride - Override the autogenerated release name based chart name
# nameOverride: ""
# fullnameOverride: ""

# env -- Redash global envrionment variables - applied to both server and worker containers.
env:
  PYTHONUNBUFFERED: 0

## Service account and security context configuration
serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created
  create: true
  # serviceAccount.annotations -- Annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

## Redash application configuration
redash:
  ## Start primary Redash configuration
  ## Note that we document the Redash defaults, but don't explicitly set them.
  ## This allows multiple versions of Redash (which may have different defaults) to be more easily used
  # -- REQUIRED `REDASH_SECRET_KEY` value. Secret key used for data encryption. Stored as a Secret value.
  secretKey: "secret"
  # -- REQUIRED `REDASH_COOKIE_SECRET` value. Stored as a Secret value.
  cookieSecret: "secret"

## Configuration for Redash web server
server:
  # server.httpPort -- Server container port (only useful if you are using a customized image)
  httpPort: 5000

  # server.env -- Redash server specific environment variables
  # Don't use this for variables that are in the configuration above, however.
  env: {}

  # server.replicaCount -- Number of server pods to run
  replicaCount: 1

service:
  # service.annotations -- Annotations to add to the service
  annotations: {}
  # service.loadBalancerIP -- Specific IP address to use for cloud providers such as Azure Kubernetes Service [ref](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer)
  loadBalancerIP:
  # service.type -- Kubernetes Service type
  type: ClusterIP
  # service.port -- Service external port
  port: 80

## Configuration for Redash ad-hoc workers
adhocWorker:
  # adhocWorker.env -- Redash ad-hoc worker specific envrionment variables.
  env:
    QUEUES: "queries,celery"
    WORKERS_COUNT: 2

  # adhocWorker.replicaCount -- Number of ad-hoc worker pods to run
  replicaCount: 1

## Configuration for Redash scheduled workers
scheduledWorker:
  # scheduledWorker.env -- Redash scheduled worker specific envrionment variables.
  env:
    QUEUES: "scheduled_queries"
    WORKERS_COUNT: 2

  # scheduledWorker.replicaCount -- Number of scheduled worker pods to run
  replicaCount: 1

## Configuration for hook-install-job
hookInstallJob:
  # hookInstallJob.ttlSecondsAfterFinished -- ttl for install job [ref](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/)
  ttlSecondsAfterFinished: 600
  # hookInstallJob.resources -- Scheduled worker resource requests and limits [ref](http://kubernetes.io/docs/user-guide/compute-resources/)

## Configuration for hook-upgrade-job
hookUpgradeJob:
  # hookUpgradeJob.ttlSecondsAfterFinished -- ttl for install job [ref](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/)
  ttlSecondsAfterFinished: 600
  # hookUpgradeJob.resources -- Scheduled worker resource requests and limits [ref](http://kubernetes.io/docs/user-guide/compute-resources/)

# externalPostgreSQL -- External PostgreSQL configuration. To use an external PostgreSQL instead of the automatically deployed postgresql chart: set postgresql.enabled to false then uncomment and configure the externalPostgreSQL connection URL (e.g. postgresql://user:pass@host:5432/database)
#externalPostgreSQL:

## Configuration values for the postgresql dependency. This PostgreSQL instance is used by default for all Redash state storage [ref](https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md)
postgresql:
  # postgresql.enabled -- Whether to deploy a PostgreSQL server to satisfy the applications database requirements. To use an external PostgreSQL set this to false and configure the externalPostgreSQL parameter.
  enabled: true
  image:
    # postgresql.image.tag -- Bitnami supported version close to the one specified in Redash [setup docker-compose.yml](https://github.com/getredash/setup/blob/master/data/docker-compose.yml)
    tag: "9.6.17-debian-10-r3"
  # postgresql.postgresqlUsername -- PostgreSQL username for redash user (when postgresql chart enabled)
  postgresqlUsername: redash
  # postgresql.postgresqlPassword -- REQUIRED: PostgreSQL password for redash user (when postgresql chart enabled)
  postgresqlPassword: secret
  # postgresql.postgresqlDatabase -- PostgreSQL database name (when postgresql chart enabled)
  postgresqlDatabase: redash
  service:
    type: ClusterIP
    port: 5432
  persistence:
    # postgresql.persistence.enabled -- Use a PVC to persist PostgreSQL data (when postgresql chart enabled)
    enabled: true
    # postgresql.persistence.storageClass - Storage Class for PostgreSQL backing PVC. If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.  (gp2 on AWS, standard on GKE, AWS & OpenStack).
    storageClass: ""
    # postgresql.persistence.accessMode -- Use PostgreSQL volume as ReadOnly or ReadWrite
    accessMode: ReadWriteOnce
    # postgresql.persistence.size -- PVC Storage Request size for PostgreSQL volume
    size: 10Gi
    # postgresql.persistence.existingClaim -- Provide an existing PostgreSQL PersistentVolumeClaim
    # existingClaim: ""

# externalRedis -- External Redis configuration. To use an external Redis instead of the automatically deployed redis chart: set redis.enabled to false then uncomment and configure the externalRedis connection URL (e.g. redis://user:pass@host:6379/database).
#externalRedis:

## Configuration values for the redis dependency. This Redis instance is used by default for caching and temporary storage [ref](https://github.com/kubernetes/charts/blob/master/stable/redis/README.md)
redis:
  # redis.enabled -- Whether to deploy a Redis server to satisfy the applications database requirements. To use an external Redis set this to false and configure the externalRedis parameter.
  enabled: true
  # redis.password -- If the password is not specified, a random password will be generated (when redis chart enabled)
  # password:
  # redis.databaseNumber -- Redis database number to use (when redis chart enabled)
  databaseNumber: 0
  master:
    # redis.master.port -- Redis master port to use (when redis chart enabled)
    port: 6379
  cluster:
    # redis.databaseNumber -- Enable Redis clustering (when redis chart enabled)
    enabled: false

ingress:
  # ingress.enabled -- Enable ingress controller resource
  enabled: false
#   # ingress.annotations -- Ingress annotations configuration
#   annotations:
#     {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   # ingress.hosts -- Ingress resource hostnames and path mappings
#   hosts:
#     - host: chart-example.local
#       paths: []
#   # ingress.tls -- Ingress TLS configuration
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local
